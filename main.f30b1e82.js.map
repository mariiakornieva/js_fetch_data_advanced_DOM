{"version":3,"sources":["scripts/main.js"],"names":["BASE_URL","request","url","fetch","catch","error","alert","getFirstReceivedDetails","ids","Promise","race","map","id","then","detail","json","getAllSuccessfulDetails","allSettled","responses","all","filter","response","status","value","getNFastestDetails","count","unusedIds","result","i","phone","idx","findIndex","splice","push","getPhoneIds","showNotification","showError","details","getPhonesListItems","phones","Array","isArray","toUpperCase","name","join","type","document","body","insertAdjacentHTML","split","e","slice"],"mappings":"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","file":"main.f30b1e82.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst BASE_URL = 'https://mate-academy.github.io/phone-catalogue-static/api';\n\ngetPhoneIds()\n  .then(getFirstReceivedDetails)\n  .then(detail => showNotification('first-received', detail))\n  .catch(error => showError('First received failed', error));\n\ngetPhoneIds()\n  .then(getAllSuccessfulDetails)\n  .then(details => showNotification('all-successful', details))\n  .catch(error => showError('All successful failed', error));\n\ngetPhoneIds()\n  .then(ids => getNFastestDetails(ids, 3))\n  .then(details => showNotification('fastest', details))\n  .catch(error => showError('N fastest failed', error));\n\nfunction request(url) {\n  return fetch(`${BASE_URL}${url}`)\n    .catch(error => alert(error));\n}\n\nfunction getFirstReceivedDetails(ids) {\n  return Promise.race(ids.map(id => request(`/phones/${id}.json`)))\n    .then(detail => detail.json());\n}\n\nfunction getAllSuccessfulDetails(ids) {\n  return Promise.allSettled(ids.map(id => request(`/phones/${id}.json`)))\n    .then(responses => {\n      return Promise.all(\n        responses.filter(response => response.status === 'fulfilled')\n          .map(response => response.value.json())\n      );\n    });\n}\n\nasync function getNFastestDetails(ids, count) {\n  const unusedIds = [...ids];\n  const result = [];\n\n  for (let i = 0; i < count; i++) {\n    const phone = await getFirstReceivedDetails(unusedIds);\n    const idx = unusedIds.findIndex(id => id === phone.id);\n\n    unusedIds.splice(idx, 1);\n    result.push(phone);\n  }\n\n  return Promise.all(result);\n}\n\nconst getPhonesListItems = (phones) => {\n  if (Array.isArray(phones)) {\n    return phones.map(\n      phone => `<li>${phone.id.toUpperCase()} - ${phone.name}</li>`\n    ).join('');\n  }\n\n  return `<li>${phones.id.toUpperCase()} - ${phones.name}</li>`;\n};\n\nfunction showNotification(type, phones) {\n  document.body.insertAdjacentHTML('beforeend', `\n    <div class=${type}>\n      <h3>\n      ${type.split('-').map(\n    e => e.slice(0, 1).toUpperCase() + e.slice(1)\n  ).join(' ')}\n      </h3>\n      <ul>\n        ${getPhonesListItems(phones)}\n      </ul>\n      </div>\n  `);\n}\n\nfunction showError(type, error) {\n  document.body.insertAdjacentHTML('beforeend', `\n    <div class=\"error\">\n      <h3>${type}</h3>\n      <p>${error}</p>\n    </div>\n  `);\n}\n\nfunction getPhoneIds() {\n  return request('/phones.json')\n    .then(phones => phones.json())\n    .then(phones => phones.map(phone => phone.id));\n}\n"]}